// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/AnalyzeResult
type AnalyzeResult struct {
	ID       string `json:"id"`
	Analysis string `json:"analysis"`
}

// GetID returns the value of ID.
func (s *AnalyzeResult) GetID() string {
	return s.ID
}

// GetAnalysis returns the value of Analysis.
func (s *AnalyzeResult) GetAnalysis() string {
	return s.Analysis
}

// SetID sets the value of ID.
func (s *AnalyzeResult) SetID(val string) {
	s.ID = val
}

// SetAnalysis sets the value of Analysis.
func (s *AnalyzeResult) SetAnalysis(val string) {
	s.Analysis = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Represent a Todo item.
// Ref: #/components/schemas/Todo
type Todo struct {
	ID      int32  `json:"id" bun:"id,pk,autoincrement"`
	Content string `json:"content"`
}

// GetID returns the value of ID.
func (s *Todo) GetID() int32 {
	return s.ID
}

// GetContent returns the value of Content.
func (s *Todo) GetContent() string {
	return s.Content
}

// SetID sets the value of ID.
func (s *Todo) SetID(val int32) {
	s.ID = val
}

// SetContent sets the value of Content.
func (s *Todo) SetContent(val string) {
	s.Content = val
}

// Represent a list of Todo items.
// Ref: #/components/schemas/TodoList
type TodoList struct {
	Items []Todo `json:"items"`
}

// GetItems returns the value of Items.
func (s *TodoList) GetItems() []Todo {
	return s.Items
}

// SetItems sets the value of Items.
func (s *TodoList) SetItems(val []Todo) {
	s.Items = val
}

// Represent a Todo item.
// Ref: #/components/schemas/TodoUpdate
type TodoUpdate struct {
	ID      OptInt32  `json:"id" bun:"id,pk,autoincrement"`
	Content OptString `json:"content"`
}

// GetID returns the value of ID.
func (s *TodoUpdate) GetID() OptInt32 {
	return s.ID
}

// GetContent returns the value of Content.
func (s *TodoUpdate) GetContent() OptString {
	return s.Content
}

// SetID sets the value of ID.
func (s *TodoUpdate) SetID(val OptInt32) {
	s.ID = val
}

// SetContent sets the value of Content.
func (s *TodoUpdate) SetContent(val OptString) {
	s.Content = val
}

// TodosDeleteNoContent is response for TodosDelete operation.
type TodosDeleteNoContent struct{}
